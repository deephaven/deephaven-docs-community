{"file":"core/docs/how-to-guides/use-jpy.md","objects":{":log":{"type":"Log","data":"Help on module jpy:\n\nNAME\n    jpy - Bi-directional Python-Java Bridge\n\nCLASSES\n    builtins.Exception(builtins.BaseException)\n        JException\n    builtins.object\n        JField\n        JMethod\n        JOverloadedMethod\n        JType\n    \n    class JException(builtins.Exception)\n     |  Common base class for all non-exit exceptions.\n     |  \n     |  Method resolution order:\n     |      JException\n     |      builtins.Exception\n     |      builtins.BaseException\n     |      builtins.object\n     |  \n     |  Data descriptors defined here:\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from builtins.Exception:\n     |  \n     |  __init__(self, /, *args, **kwargs)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Static methods inherited from builtins.Exception:\n     |  \n     |  __new__(*args, **kwargs) from builtins.type\n     |      Create and return a new object.  See help(type) for accurate signature.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from builtins.BaseException:\n     |  \n     |  __delattr__(self, name, /)\n     |      Implement delattr(self, name).\n     |  \n     |  __getattribute__(self, name, /)\n     |      Return getattr(self, name).\n     |  \n     |  __reduce__(...)\n     |      Helper for pickle.\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __setattr__(self, name, value, /)\n     |      Implement setattr(self, name, value).\n     |  \n     |  __setstate__(...)\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n     |  \n     |  with_traceback(...)\n     |      Exception.with_traceback(tb) --\n     |      set self.__traceback__ to tb and return self.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from builtins.BaseException:\n     |  \n     |  __cause__\n     |      exception cause\n     |  \n     |  __context__\n     |      exception context\n     |  \n     |  __dict__\n     |  \n     |  __suppress_context__\n     |  \n     |  __traceback__\n     |  \n     |  args\n    \n    class JField(builtins.object)\n     |  Java Field Wrapper\n     |  \n     |  Methods defined here:\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  is_final\n     |      Tests if this is a final field\n     |  \n     |  is_static\n     |      Tests if this is a static field\n     |  \n     |  name\n     |      Field name\n    \n    class JMethod(builtins.object)\n     |  Java Method Wrapper\n     |  \n     |  Methods defined here:\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n     |  \n     |  get_param_type(...)\n     |      Gets the type of the parameter given by index\n     |  \n     |  is_param_mutable(...)\n     |      Tests if the method parameter given by index is mutable\n     |  \n     |  is_param_output(...)\n     |      Tests if the method parameter given by index is a mere output value (and not read from)\n     |  \n     |  is_param_return(...)\n     |      Tests if the method parameter given by index is the return value\n     |  \n     |  set_param_mutable(...)\n     |      Sets whether the method parameter given by index is mutable\n     |  \n     |  set_param_output(...)\n     |      Sets whether the method parameter given by index is a mere output value (and not read from)\n     |  \n     |  set_param_return(...)\n     |      Sets whether the method parameter given by index is the return value\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  is_static\n     |      Tests if this is a static method\n     |  \n     |  name\n     |      Method name\n     |  \n     |  param_count\n     |      Number of method parameters\n    \n    class JOverloadedMethod(builtins.object)\n     |  Java Overloaded Method\n     |  \n     |  Methods defined here:\n     |  \n     |  __call__(self, /, *args, **kwargs)\n     |      Call self as a function.\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  decl_class\n     |      Declaring Java class\n     |  \n     |  methods\n     |      List of methods\n     |  \n     |  name\n     |      Overloaded method name\n    \n    class JType(builtins.object)\n     |  Java Meta Type\n     |  \n     |  Methods defined here:\n     |  \n     |  __getattribute__(self, name, /)\n     |      Return getattr(self, name).\n     |  \n     |  __repr__(self, /)\n     |      Return repr(self).\n     |  \n     |  __str__(self, /)\n     |      Return str(self).\n\nFUNCTIONS\n    array(...)\n        array(name, init) - Return a new Java array of given Java type (type name or type object) and initializer (array length or sequence). Possible primitive types are 'boolean', 'byte', 'char', 'short', 'int', 'long', 'float', and 'double'.\n    \n    cast(...)\n        cast(obj, type) - Cast the given Java object to the given Java type (type name or type object). Returns None if the cast is not possible.\n    \n    create_jvm(...)\n        create_jvm(options) - Create the Java VM from the given list of options.\n    \n    destroy_jvm(...)\n        destroy_jvm() - Destroy the current Java VM.\n    \n    get_type(...)\n        get_type(name, resolve=True) - Return the Java class with the given name, e.g. 'java.io.File'. Loads the Java class from the JVM if not already done. Optionally avoids resolving the class' methods.\n    \n    has_jvm(...)\n        has_jvm() - Check if the JVM is available.\n\nDATA\n    VerboseExceptions = <jpy.VerboseExceptions object>\n    diag = <jpy.Diag object>\n    type_callbacks = {}\n    type_translations = {}\n    types = {'[B': <class '[B'>, '[C': <class '[C'>, '[D': <class '[D'>, '...\n\nFILE\n    /opt/deephaven-venv/lib/python3.7/site-packages/jpy.cpython-37m-x86_64-linux-gnu.so\n\n\n"}}}