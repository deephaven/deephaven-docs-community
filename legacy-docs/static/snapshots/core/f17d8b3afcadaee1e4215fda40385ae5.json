{"file":"core/docs/how-to-guides/use-jpy.md","objects":{":log":{"type":"Log","data":"Help on Random object:\n\nclass Random(java.lang.Object)\n |  Java Meta Type\n |  \n |  Method resolution order:\n |      Random\n |      java.lang.Object\n |      jpy.JType\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  __delattr__(self, name, /)\n |      Implement delattr(self, name).\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  __hash__(self, /)\n |      Return hash(self).\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __le__(self, value, /)\n |      Return self<=value.\n |  \n |  __lt__(self, value, /)\n |      Return self<value.\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  __setattr__(self, name, value, /)\n |      Implement setattr(self, name, value).\n |  \n |  __str__(self, /)\n |      Return str(self).\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __jinit__ = jpy.JOverloadedMethod(class='java.util.Random', name='__ji...\n |      Java Overloaded Method\n |  \n |  doubles = jpy.JOverloadedMethod(class='java.util.Random', name='double...\n |      Java Overloaded Method\n |  \n |  equals = jpy.JOverloadedMethod(class='java.util.Random', name='equals'...\n |      Java Overloaded Method\n |  \n |  getClass = jpy.JOverloadedMethod(class='java.util.Random', name='getCl...\n |      Java Overloaded Method\n |  \n |  hashCode = jpy.JOverloadedMethod(class='java.util.Random', name='hashC...\n |      Java Overloaded Method\n |  \n |  ints = jpy.JOverloadedMethod(class='java.util.Random', name='ints', me...\n |      Java Overloaded Method\n |  \n |  jclass = java.lang.Class(objectRef=0x7f2a8e60b378)\n |  \n |  longs = jpy.JOverloadedMethod(class='java.util.Random', name='longs', ...\n |      Java Overloaded Method\n |  \n |  nextBoolean = jpy.JOverloadedMethod(class='java.util.Random', name='ne...\n |      Java Overloaded Method\n |  \n |  nextBytes = jpy.JOverloadedMethod(class='java.util.Random', name='next...\n |      Java Overloaded Method\n |  \n |  nextDouble = jpy.JOverloadedMethod(class='java.util.Random', name='nex...\n |      Java Overloaded Method\n |  \n |  nextFloat = jpy.JOverloadedMethod(class='java.util.Random', name='next...\n |      Java Overloaded Method\n |  \n |  nextGaussian = jpy.JOverloadedMethod(class='java.util.Random', name='n...\n |      Java Overloaded Method\n |  \n |  nextInt = jpy.JOverloadedMethod(class='java.util.Random', name='nextIn...\n |      Java Overloaded Method\n |  \n |  nextLong = jpy.JOverloadedMethod(class='java.util.Random', name='nextL...\n |      Java Overloaded Method\n |  \n |  notify = jpy.JOverloadedMethod(class='java.util.Random', name='notify'...\n |      Java Overloaded Method\n |  \n |  notifyAll = jpy.JOverloadedMethod(class='java.util.Random', name='noti...\n |      Java Overloaded Method\n |  \n |  setSeed = jpy.JOverloadedMethod(class='java.util.Random', name='setSee...\n |      Java Overloaded Method\n |  \n |  toString = jpy.JOverloadedMethod(class='java.util.Random', name='toStr...\n |      Java Overloaded Method\n |  \n |  wait = jpy.JOverloadedMethod(class='java.util.Random', name='wait', me...\n |      Java Overloaded Method\n\n"}}}